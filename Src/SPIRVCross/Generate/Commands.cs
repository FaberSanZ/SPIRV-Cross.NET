// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace SPIRVCross
{
	public unsafe partial class SPIRV
	{
		internal static IntPtr s_NativeLibrary = LoadNativeLibrary();
		internal static T LoadFunction<T>(string name) => LibraryLoader.LoadFunction<T>(s_NativeLibrary, name);
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_get_version(uint* major, uint* minor, uint* patch);
		private static readonly PFN_spvc_get_version spvc_get_version_ = LoadFunction<PFN_spvc_get_version>(nameof(spvc_get_version));
		public static void spvc_get_version(uint* major, uint* minor, uint* patch)
		{
			spvc_get_version_(major, minor, patch);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_get_commit_revision_and_timestamp();
		private static readonly PFN_spvc_get_commit_revision_and_timestamp spvc_get_commit_revision_and_timestamp_ = LoadFunction<PFN_spvc_get_commit_revision_and_timestamp>(nameof(spvc_get_commit_revision_and_timestamp));
		public static byte* spvc_get_commit_revision_and_timestamp()
		{
			return spvc_get_commit_revision_and_timestamp_();
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_msl_vertex_attribute_init(spvc_msl_vertex_attribute* attr);
		private static readonly PFN_spvc_msl_vertex_attribute_init spvc_msl_vertex_attribute_init_ = LoadFunction<PFN_spvc_msl_vertex_attribute_init>(nameof(spvc_msl_vertex_attribute_init));
		public static void spvc_msl_vertex_attribute_init(spvc_msl_vertex_attribute* attr)
		{
			spvc_msl_vertex_attribute_init_(attr);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_msl_shader_input_init(spvc_msl_shader_input* input);
		private static readonly PFN_spvc_msl_shader_input_init spvc_msl_shader_input_init_ = LoadFunction<PFN_spvc_msl_shader_input_init>(nameof(spvc_msl_shader_input_init));
		public static void spvc_msl_shader_input_init(spvc_msl_shader_input* input)
		{
			spvc_msl_shader_input_init_(input);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_msl_resource_binding_init(spvc_msl_resource_binding* binding);
		private static readonly PFN_spvc_msl_resource_binding_init spvc_msl_resource_binding_init_ = LoadFunction<PFN_spvc_msl_resource_binding_init>(nameof(spvc_msl_resource_binding_init));
		public static void spvc_msl_resource_binding_init(spvc_msl_resource_binding* binding)
		{
			spvc_msl_resource_binding_init_(binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_msl_get_aux_buffer_struct_version();
		private static readonly PFN_spvc_msl_get_aux_buffer_struct_version spvc_msl_get_aux_buffer_struct_version_ = LoadFunction<PFN_spvc_msl_get_aux_buffer_struct_version>(nameof(spvc_msl_get_aux_buffer_struct_version));
		public static uint spvc_msl_get_aux_buffer_struct_version()
		{
			return spvc_msl_get_aux_buffer_struct_version_();
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_msl_constexpr_sampler_init(spvc_msl_constexpr_sampler* sampler);
		private static readonly PFN_spvc_msl_constexpr_sampler_init spvc_msl_constexpr_sampler_init_ = LoadFunction<PFN_spvc_msl_constexpr_sampler_init>(nameof(spvc_msl_constexpr_sampler_init));
		public static void spvc_msl_constexpr_sampler_init(spvc_msl_constexpr_sampler* sampler)
		{
			spvc_msl_constexpr_sampler_init_(sampler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_msl_sampler_ycbcr_conversion_init(spvc_msl_sampler_ycbcr_conversion* conv);
		private static readonly PFN_spvc_msl_sampler_ycbcr_conversion_init spvc_msl_sampler_ycbcr_conversion_init_ = LoadFunction<PFN_spvc_msl_sampler_ycbcr_conversion_init>(nameof(spvc_msl_sampler_ycbcr_conversion_init));
		public static void spvc_msl_sampler_ycbcr_conversion_init(spvc_msl_sampler_ycbcr_conversion* conv)
		{
			spvc_msl_sampler_ycbcr_conversion_init_(conv);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_hlsl_resource_binding_init(spvc_hlsl_resource_binding* binding);
		private static readonly PFN_spvc_hlsl_resource_binding_init spvc_hlsl_resource_binding_init_ = LoadFunction<PFN_spvc_hlsl_resource_binding_init>(nameof(spvc_hlsl_resource_binding_init));
		public static void spvc_hlsl_resource_binding_init(spvc_hlsl_resource_binding* binding)
		{
			spvc_hlsl_resource_binding_init_(binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_context_create(spvc_context* context);
		private static readonly PFN_spvc_context_create spvc_context_create_ = LoadFunction<PFN_spvc_context_create>(nameof(spvc_context_create));
		public static spvc_result spvc_context_create(spvc_context* context)
		{
			return spvc_context_create_(context);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_context_destroy(spvc_context context);
		private static readonly PFN_spvc_context_destroy spvc_context_destroy_ = LoadFunction<PFN_spvc_context_destroy>(nameof(spvc_context_destroy));
		public static void spvc_context_destroy(spvc_context context)
		{
			spvc_context_destroy_(context);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_context_release_allocations(spvc_context context);
		private static readonly PFN_spvc_context_release_allocations spvc_context_release_allocations_ = LoadFunction<PFN_spvc_context_release_allocations>(nameof(spvc_context_release_allocations));
		public static void spvc_context_release_allocations(spvc_context context)
		{
			spvc_context_release_allocations_(context);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_context_get_last_error_string(spvc_context context);
		private static readonly PFN_spvc_context_get_last_error_string spvc_context_get_last_error_string_ = LoadFunction<PFN_spvc_context_get_last_error_string>(nameof(spvc_context_get_last_error_string));
		public static byte* spvc_context_get_last_error_string(spvc_context context)
		{
			return spvc_context_get_last_error_string_(context);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_context_set_error_callback(spvc_context context, spvc_error_callback cb, void* userdata);
		private static readonly PFN_spvc_context_set_error_callback spvc_context_set_error_callback_ = LoadFunction<PFN_spvc_context_set_error_callback>(nameof(spvc_context_set_error_callback));
		public static void spvc_context_set_error_callback(spvc_context context, spvc_error_callback cb, void* userdata)
		{
			spvc_context_set_error_callback_(context, cb, userdata);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_context_parse_spirv(spvc_context context, SpvId* spirv, nuint word_count, spvc_parsed_ir* parsed_ir);
		private static readonly PFN_spvc_context_parse_spirv spvc_context_parse_spirv_ = LoadFunction<PFN_spvc_context_parse_spirv>(nameof(spvc_context_parse_spirv));
		public static spvc_result spvc_context_parse_spirv(spvc_context context, SpvId* spirv, nuint word_count, spvc_parsed_ir* parsed_ir)
		{
			return spvc_context_parse_spirv_(context, spirv, word_count, parsed_ir);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_context_create_compiler(spvc_context context, spvc_backend backend, spvc_parsed_ir parsed_ir, spvc_capture_mode mode, spvc_compiler* compiler);
		private static readonly PFN_spvc_context_create_compiler spvc_context_create_compiler_ = LoadFunction<PFN_spvc_context_create_compiler>(nameof(spvc_context_create_compiler));
		public static spvc_result spvc_context_create_compiler(spvc_context context, spvc_backend backend, spvc_parsed_ir parsed_ir, spvc_capture_mode mode, spvc_compiler* compiler)
		{
			return spvc_context_create_compiler_(context, backend, parsed_ir, mode, compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_get_current_id_bound(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_get_current_id_bound spvc_compiler_get_current_id_bound_ = LoadFunction<PFN_spvc_compiler_get_current_id_bound>(nameof(spvc_compiler_get_current_id_bound));
		public static uint spvc_compiler_get_current_id_bound(spvc_compiler compiler)
		{
			return spvc_compiler_get_current_id_bound_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_create_compiler_options(spvc_compiler compiler, spvc_compiler_options* options);
		private static readonly PFN_spvc_compiler_create_compiler_options spvc_compiler_create_compiler_options_ = LoadFunction<PFN_spvc_compiler_create_compiler_options>(nameof(spvc_compiler_create_compiler_options));
		public static spvc_result spvc_compiler_create_compiler_options(spvc_compiler compiler, spvc_compiler_options* options)
		{
			return spvc_compiler_create_compiler_options_(compiler, options);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_options_set_bool(spvc_compiler_options options, spvc_compiler_option option, bool value);
		private static readonly PFN_spvc_compiler_options_set_bool spvc_compiler_options_set_bool_ = LoadFunction<PFN_spvc_compiler_options_set_bool>(nameof(spvc_compiler_options_set_bool));
		public static spvc_result spvc_compiler_options_set_bool(spvc_compiler_options options, spvc_compiler_option option, bool value)
		{
			return spvc_compiler_options_set_bool_(options, option, value);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_options_set_uint(spvc_compiler_options options, spvc_compiler_option option, uint value);
		private static readonly PFN_spvc_compiler_options_set_uint spvc_compiler_options_set_uint_ = LoadFunction<PFN_spvc_compiler_options_set_uint>(nameof(spvc_compiler_options_set_uint));
		public static spvc_result spvc_compiler_options_set_uint(spvc_compiler_options options, spvc_compiler_option option, uint value)
		{
			return spvc_compiler_options_set_uint_(options, option, value);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_install_compiler_options(spvc_compiler compiler, spvc_compiler_options options);
		private static readonly PFN_spvc_compiler_install_compiler_options spvc_compiler_install_compiler_options_ = LoadFunction<PFN_spvc_compiler_install_compiler_options>(nameof(spvc_compiler_install_compiler_options));
		public static spvc_result spvc_compiler_install_compiler_options(spvc_compiler compiler, spvc_compiler_options options)
		{
			return spvc_compiler_install_compiler_options_(compiler, options);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_compile(spvc_compiler compiler, byte* source);
		private static readonly PFN_spvc_compiler_compile spvc_compiler_compile_ = LoadFunction<PFN_spvc_compiler_compile>(nameof(spvc_compiler_compile));
		public static spvc_result spvc_compiler_compile(spvc_compiler compiler, byte* source)
		{
			return spvc_compiler_compile_(compiler, source);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_add_header_line(spvc_compiler compiler, byte* line);
		private static readonly PFN_spvc_compiler_add_header_line spvc_compiler_add_header_line_ = LoadFunction<PFN_spvc_compiler_add_header_line>(nameof(spvc_compiler_add_header_line));
		public static spvc_result spvc_compiler_add_header_line(spvc_compiler compiler, byte* line)
		{
			return spvc_compiler_add_header_line_(compiler, line);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_require_extension(spvc_compiler compiler, byte* ext);
		private static readonly PFN_spvc_compiler_require_extension spvc_compiler_require_extension_ = LoadFunction<PFN_spvc_compiler_require_extension>(nameof(spvc_compiler_require_extension));
		public static spvc_result spvc_compiler_require_extension(spvc_compiler compiler, byte* ext)
		{
			return spvc_compiler_require_extension_(compiler, ext);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_flatten_buffer_block(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_flatten_buffer_block spvc_compiler_flatten_buffer_block_ = LoadFunction<PFN_spvc_compiler_flatten_buffer_block>(nameof(spvc_compiler_flatten_buffer_block));
		public static spvc_result spvc_compiler_flatten_buffer_block(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_flatten_buffer_block_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_variable_is_depth_or_compare(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_variable_is_depth_or_compare spvc_compiler_variable_is_depth_or_compare_ = LoadFunction<PFN_spvc_compiler_variable_is_depth_or_compare>(nameof(spvc_compiler_variable_is_depth_or_compare));
		public static bool spvc_compiler_variable_is_depth_or_compare(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_variable_is_depth_or_compare_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_hlsl_set_root_constants_layout(spvc_compiler compiler, spvc_hlsl_root_constants* constant_info, nuint count);
		private static readonly PFN_spvc_compiler_hlsl_set_root_constants_layout spvc_compiler_hlsl_set_root_constants_layout_ = LoadFunction<PFN_spvc_compiler_hlsl_set_root_constants_layout>(nameof(spvc_compiler_hlsl_set_root_constants_layout));
		public static spvc_result spvc_compiler_hlsl_set_root_constants_layout(spvc_compiler compiler, spvc_hlsl_root_constants* constant_info, nuint count)
		{
			return spvc_compiler_hlsl_set_root_constants_layout_(compiler, constant_info, count);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_hlsl_add_vertex_attribute_remap(spvc_compiler compiler, spvc_hlsl_vertex_attribute_remap* remap, nuint remaps);
		private static readonly PFN_spvc_compiler_hlsl_add_vertex_attribute_remap spvc_compiler_hlsl_add_vertex_attribute_remap_ = LoadFunction<PFN_spvc_compiler_hlsl_add_vertex_attribute_remap>(nameof(spvc_compiler_hlsl_add_vertex_attribute_remap));
		public static spvc_result spvc_compiler_hlsl_add_vertex_attribute_remap(spvc_compiler compiler, spvc_hlsl_vertex_attribute_remap* remap, nuint remaps)
		{
			return spvc_compiler_hlsl_add_vertex_attribute_remap_(compiler, remap, remaps);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_hlsl_remap_num_workgroups_builtin(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_hlsl_remap_num_workgroups_builtin spvc_compiler_hlsl_remap_num_workgroups_builtin_ = LoadFunction<PFN_spvc_compiler_hlsl_remap_num_workgroups_builtin>(nameof(spvc_compiler_hlsl_remap_num_workgroups_builtin));
		public static uint spvc_compiler_hlsl_remap_num_workgroups_builtin(spvc_compiler compiler)
		{
			return spvc_compiler_hlsl_remap_num_workgroups_builtin_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_hlsl_set_resource_binding_flags(spvc_compiler compiler, uint flags);
		private static readonly PFN_spvc_compiler_hlsl_set_resource_binding_flags spvc_compiler_hlsl_set_resource_binding_flags_ = LoadFunction<PFN_spvc_compiler_hlsl_set_resource_binding_flags>(nameof(spvc_compiler_hlsl_set_resource_binding_flags));
		public static spvc_result spvc_compiler_hlsl_set_resource_binding_flags(spvc_compiler compiler, uint flags)
		{
			return spvc_compiler_hlsl_set_resource_binding_flags_(compiler, flags);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_hlsl_add_resource_binding(spvc_compiler compiler, spvc_hlsl_resource_binding* binding);
		private static readonly PFN_spvc_compiler_hlsl_add_resource_binding spvc_compiler_hlsl_add_resource_binding_ = LoadFunction<PFN_spvc_compiler_hlsl_add_resource_binding>(nameof(spvc_compiler_hlsl_add_resource_binding));
		public static spvc_result spvc_compiler_hlsl_add_resource_binding(spvc_compiler compiler, spvc_hlsl_resource_binding* binding)
		{
			return spvc_compiler_hlsl_add_resource_binding_(compiler, binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_hlsl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding);
		private static readonly PFN_spvc_compiler_hlsl_is_resource_used spvc_compiler_hlsl_is_resource_used_ = LoadFunction<PFN_spvc_compiler_hlsl_is_resource_used>(nameof(spvc_compiler_hlsl_is_resource_used));
		public static bool spvc_compiler_hlsl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding)
		{
			return spvc_compiler_hlsl_is_resource_used_(compiler, model, set, binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_is_rasterization_disabled(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_is_rasterization_disabled spvc_compiler_msl_is_rasterization_disabled_ = LoadFunction<PFN_spvc_compiler_msl_is_rasterization_disabled>(nameof(spvc_compiler_msl_is_rasterization_disabled));
		public static bool spvc_compiler_msl_is_rasterization_disabled(spvc_compiler compiler)
		{
			return spvc_compiler_msl_is_rasterization_disabled_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_needs_aux_buffer(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_needs_aux_buffer spvc_compiler_msl_needs_aux_buffer_ = LoadFunction<PFN_spvc_compiler_msl_needs_aux_buffer>(nameof(spvc_compiler_msl_needs_aux_buffer));
		public static bool spvc_compiler_msl_needs_aux_buffer(spvc_compiler compiler)
		{
			return spvc_compiler_msl_needs_aux_buffer_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_needs_swizzle_buffer(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_needs_swizzle_buffer spvc_compiler_msl_needs_swizzle_buffer_ = LoadFunction<PFN_spvc_compiler_msl_needs_swizzle_buffer>(nameof(spvc_compiler_msl_needs_swizzle_buffer));
		public static bool spvc_compiler_msl_needs_swizzle_buffer(spvc_compiler compiler)
		{
			return spvc_compiler_msl_needs_swizzle_buffer_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_needs_buffer_size_buffer(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_needs_buffer_size_buffer spvc_compiler_msl_needs_buffer_size_buffer_ = LoadFunction<PFN_spvc_compiler_msl_needs_buffer_size_buffer>(nameof(spvc_compiler_msl_needs_buffer_size_buffer));
		public static bool spvc_compiler_msl_needs_buffer_size_buffer(spvc_compiler compiler)
		{
			return spvc_compiler_msl_needs_buffer_size_buffer_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_needs_output_buffer(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_needs_output_buffer spvc_compiler_msl_needs_output_buffer_ = LoadFunction<PFN_spvc_compiler_msl_needs_output_buffer>(nameof(spvc_compiler_msl_needs_output_buffer));
		public static bool spvc_compiler_msl_needs_output_buffer(spvc_compiler compiler)
		{
			return spvc_compiler_msl_needs_output_buffer_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_needs_patch_output_buffer(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_needs_patch_output_buffer spvc_compiler_msl_needs_patch_output_buffer_ = LoadFunction<PFN_spvc_compiler_msl_needs_patch_output_buffer>(nameof(spvc_compiler_msl_needs_patch_output_buffer));
		public static bool spvc_compiler_msl_needs_patch_output_buffer(spvc_compiler compiler)
		{
			return spvc_compiler_msl_needs_patch_output_buffer_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_needs_input_threadgroup_mem(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_needs_input_threadgroup_mem spvc_compiler_msl_needs_input_threadgroup_mem_ = LoadFunction<PFN_spvc_compiler_msl_needs_input_threadgroup_mem>(nameof(spvc_compiler_msl_needs_input_threadgroup_mem));
		public static bool spvc_compiler_msl_needs_input_threadgroup_mem(spvc_compiler compiler)
		{
			return spvc_compiler_msl_needs_input_threadgroup_mem_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_add_vertex_attribute(spvc_compiler compiler, spvc_msl_vertex_attribute* attrs);
		private static readonly PFN_spvc_compiler_msl_add_vertex_attribute spvc_compiler_msl_add_vertex_attribute_ = LoadFunction<PFN_spvc_compiler_msl_add_vertex_attribute>(nameof(spvc_compiler_msl_add_vertex_attribute));
		public static spvc_result spvc_compiler_msl_add_vertex_attribute(spvc_compiler compiler, spvc_msl_vertex_attribute* attrs)
		{
			return spvc_compiler_msl_add_vertex_attribute_(compiler, attrs);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_add_resource_binding(spvc_compiler compiler, spvc_msl_resource_binding* binding);
		private static readonly PFN_spvc_compiler_msl_add_resource_binding spvc_compiler_msl_add_resource_binding_ = LoadFunction<PFN_spvc_compiler_msl_add_resource_binding>(nameof(spvc_compiler_msl_add_resource_binding));
		public static spvc_result spvc_compiler_msl_add_resource_binding(spvc_compiler compiler, spvc_msl_resource_binding* binding)
		{
			return spvc_compiler_msl_add_resource_binding_(compiler, binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_add_shader_input(spvc_compiler compiler, spvc_msl_shader_input* input);
		private static readonly PFN_spvc_compiler_msl_add_shader_input spvc_compiler_msl_add_shader_input_ = LoadFunction<PFN_spvc_compiler_msl_add_shader_input>(nameof(spvc_compiler_msl_add_shader_input));
		public static spvc_result spvc_compiler_msl_add_shader_input(spvc_compiler compiler, spvc_msl_shader_input* input)
		{
			return spvc_compiler_msl_add_shader_input_(compiler, input);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_add_discrete_descriptor_set(spvc_compiler compiler, uint desc_set);
		private static readonly PFN_spvc_compiler_msl_add_discrete_descriptor_set spvc_compiler_msl_add_discrete_descriptor_set_ = LoadFunction<PFN_spvc_compiler_msl_add_discrete_descriptor_set>(nameof(spvc_compiler_msl_add_discrete_descriptor_set));
		public static spvc_result spvc_compiler_msl_add_discrete_descriptor_set(spvc_compiler compiler, uint desc_set)
		{
			return spvc_compiler_msl_add_discrete_descriptor_set_(compiler, desc_set);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_set_argument_buffer_device_address_space(spvc_compiler compiler, uint desc_set, bool device_address);
		private static readonly PFN_spvc_compiler_msl_set_argument_buffer_device_address_space spvc_compiler_msl_set_argument_buffer_device_address_space_ = LoadFunction<PFN_spvc_compiler_msl_set_argument_buffer_device_address_space>(nameof(spvc_compiler_msl_set_argument_buffer_device_address_space));
		public static spvc_result spvc_compiler_msl_set_argument_buffer_device_address_space(spvc_compiler compiler, uint desc_set, bool device_address)
		{
			return spvc_compiler_msl_set_argument_buffer_device_address_space_(compiler, desc_set, device_address);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_is_vertex_attribute_used(spvc_compiler compiler, uint location);
		private static readonly PFN_spvc_compiler_msl_is_vertex_attribute_used spvc_compiler_msl_is_vertex_attribute_used_ = LoadFunction<PFN_spvc_compiler_msl_is_vertex_attribute_used>(nameof(spvc_compiler_msl_is_vertex_attribute_used));
		public static bool spvc_compiler_msl_is_vertex_attribute_used(spvc_compiler compiler, uint location)
		{
			return spvc_compiler_msl_is_vertex_attribute_used_(compiler, location);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_is_shader_input_used(spvc_compiler compiler, uint location);
		private static readonly PFN_spvc_compiler_msl_is_shader_input_used spvc_compiler_msl_is_shader_input_used_ = LoadFunction<PFN_spvc_compiler_msl_is_shader_input_used>(nameof(spvc_compiler_msl_is_shader_input_used));
		public static bool spvc_compiler_msl_is_shader_input_used(spvc_compiler compiler, uint location)
		{
			return spvc_compiler_msl_is_shader_input_used_(compiler, location);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_msl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding);
		private static readonly PFN_spvc_compiler_msl_is_resource_used spvc_compiler_msl_is_resource_used_ = LoadFunction<PFN_spvc_compiler_msl_is_resource_used>(nameof(spvc_compiler_msl_is_resource_used));
		public static bool spvc_compiler_msl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, uint set, uint binding)
		{
			return spvc_compiler_msl_is_resource_used_(compiler, model, set, binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_remap_constexpr_sampler(spvc_compiler compiler, uint id, spvc_msl_constexpr_sampler* sampler);
		private static readonly PFN_spvc_compiler_msl_remap_constexpr_sampler spvc_compiler_msl_remap_constexpr_sampler_ = LoadFunction<PFN_spvc_compiler_msl_remap_constexpr_sampler>(nameof(spvc_compiler_msl_remap_constexpr_sampler));
		public static spvc_result spvc_compiler_msl_remap_constexpr_sampler(spvc_compiler compiler, uint id, spvc_msl_constexpr_sampler* sampler)
		{
			return spvc_compiler_msl_remap_constexpr_sampler_(compiler, id, sampler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_remap_constexpr_sampler_by_binding(spvc_compiler compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler);
		private static readonly PFN_spvc_compiler_msl_remap_constexpr_sampler_by_binding spvc_compiler_msl_remap_constexpr_sampler_by_binding_ = LoadFunction<PFN_spvc_compiler_msl_remap_constexpr_sampler_by_binding>(nameof(spvc_compiler_msl_remap_constexpr_sampler_by_binding));
		public static spvc_result spvc_compiler_msl_remap_constexpr_sampler_by_binding(spvc_compiler compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler)
		{
			return spvc_compiler_msl_remap_constexpr_sampler_by_binding_(compiler, desc_set, binding, sampler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_remap_constexpr_sampler_ycbcr(spvc_compiler compiler, uint id, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv);
		private static readonly PFN_spvc_compiler_msl_remap_constexpr_sampler_ycbcr spvc_compiler_msl_remap_constexpr_sampler_ycbcr_ = LoadFunction<PFN_spvc_compiler_msl_remap_constexpr_sampler_ycbcr>(nameof(spvc_compiler_msl_remap_constexpr_sampler_ycbcr));
		public static spvc_result spvc_compiler_msl_remap_constexpr_sampler_ycbcr(spvc_compiler compiler, uint id, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv)
		{
			return spvc_compiler_msl_remap_constexpr_sampler_ycbcr_(compiler, id, sampler, conv);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(spvc_compiler compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv);
		private static readonly PFN_spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr_ = LoadFunction<PFN_spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr>(nameof(spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr));
		public static spvc_result spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(spvc_compiler compiler, uint desc_set, uint binding, spvc_msl_constexpr_sampler* sampler, spvc_msl_sampler_ycbcr_conversion* conv)
		{
			return spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr_(compiler, desc_set, binding, sampler, conv);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_set_fragment_output_components(spvc_compiler compiler, uint location, uint components);
		private static readonly PFN_spvc_compiler_msl_set_fragment_output_components spvc_compiler_msl_set_fragment_output_components_ = LoadFunction<PFN_spvc_compiler_msl_set_fragment_output_components>(nameof(spvc_compiler_msl_set_fragment_output_components));
		public static spvc_result spvc_compiler_msl_set_fragment_output_components(spvc_compiler compiler, uint location, uint components)
		{
			return spvc_compiler_msl_set_fragment_output_components_(compiler, location, components);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_msl_get_automatic_resource_binding(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_msl_get_automatic_resource_binding spvc_compiler_msl_get_automatic_resource_binding_ = LoadFunction<PFN_spvc_compiler_msl_get_automatic_resource_binding>(nameof(spvc_compiler_msl_get_automatic_resource_binding));
		public static uint spvc_compiler_msl_get_automatic_resource_binding(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_msl_get_automatic_resource_binding_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_msl_get_automatic_resource_binding_secondary(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_msl_get_automatic_resource_binding_secondary spvc_compiler_msl_get_automatic_resource_binding_secondary_ = LoadFunction<PFN_spvc_compiler_msl_get_automatic_resource_binding_secondary>(nameof(spvc_compiler_msl_get_automatic_resource_binding_secondary));
		public static uint spvc_compiler_msl_get_automatic_resource_binding_secondary(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_msl_get_automatic_resource_binding_secondary_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_add_dynamic_buffer(spvc_compiler compiler, uint desc_set, uint binding, uint index);
		private static readonly PFN_spvc_compiler_msl_add_dynamic_buffer spvc_compiler_msl_add_dynamic_buffer_ = LoadFunction<PFN_spvc_compiler_msl_add_dynamic_buffer>(nameof(spvc_compiler_msl_add_dynamic_buffer));
		public static spvc_result spvc_compiler_msl_add_dynamic_buffer(spvc_compiler compiler, uint desc_set, uint binding, uint index)
		{
			return spvc_compiler_msl_add_dynamic_buffer_(compiler, desc_set, binding, index);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_add_inline_uniform_block(spvc_compiler compiler, uint desc_set, uint binding);
		private static readonly PFN_spvc_compiler_msl_add_inline_uniform_block spvc_compiler_msl_add_inline_uniform_block_ = LoadFunction<PFN_spvc_compiler_msl_add_inline_uniform_block>(nameof(spvc_compiler_msl_add_inline_uniform_block));
		public static spvc_result spvc_compiler_msl_add_inline_uniform_block(spvc_compiler compiler, uint desc_set, uint binding)
		{
			return spvc_compiler_msl_add_inline_uniform_block_(compiler, desc_set, binding);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_msl_set_combined_sampler_suffix(spvc_compiler compiler, byte* suffix);
		private static readonly PFN_spvc_compiler_msl_set_combined_sampler_suffix spvc_compiler_msl_set_combined_sampler_suffix_ = LoadFunction<PFN_spvc_compiler_msl_set_combined_sampler_suffix>(nameof(spvc_compiler_msl_set_combined_sampler_suffix));
		public static spvc_result spvc_compiler_msl_set_combined_sampler_suffix(spvc_compiler compiler, byte* suffix)
		{
			return spvc_compiler_msl_set_combined_sampler_suffix_(compiler, suffix);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_msl_get_combined_sampler_suffix(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_msl_get_combined_sampler_suffix spvc_compiler_msl_get_combined_sampler_suffix_ = LoadFunction<PFN_spvc_compiler_msl_get_combined_sampler_suffix>(nameof(spvc_compiler_msl_get_combined_sampler_suffix));
		public static byte* spvc_compiler_msl_get_combined_sampler_suffix(spvc_compiler compiler)
		{
			return spvc_compiler_msl_get_combined_sampler_suffix_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_active_interface_variables(spvc_compiler compiler, spvc_set* set);
		private static readonly PFN_spvc_compiler_get_active_interface_variables spvc_compiler_get_active_interface_variables_ = LoadFunction<PFN_spvc_compiler_get_active_interface_variables>(nameof(spvc_compiler_get_active_interface_variables));
		public static spvc_result spvc_compiler_get_active_interface_variables(spvc_compiler compiler, spvc_set* set)
		{
			return spvc_compiler_get_active_interface_variables_(compiler, set);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_set_enabled_interface_variables(spvc_compiler compiler, spvc_set set);
		private static readonly PFN_spvc_compiler_set_enabled_interface_variables spvc_compiler_set_enabled_interface_variables_ = LoadFunction<PFN_spvc_compiler_set_enabled_interface_variables>(nameof(spvc_compiler_set_enabled_interface_variables));
		public static spvc_result spvc_compiler_set_enabled_interface_variables(spvc_compiler compiler, spvc_set set)
		{
			return spvc_compiler_set_enabled_interface_variables_(compiler, set);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_create_shader_resources(spvc_compiler compiler, spvc_resources* resources);
		private static readonly PFN_spvc_compiler_create_shader_resources spvc_compiler_create_shader_resources_ = LoadFunction<PFN_spvc_compiler_create_shader_resources>(nameof(spvc_compiler_create_shader_resources));
		public static spvc_result spvc_compiler_create_shader_resources(spvc_compiler compiler, spvc_resources* resources)
		{
			return spvc_compiler_create_shader_resources_(compiler, resources);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_create_shader_resources_for_active_variables(spvc_compiler compiler, spvc_resources* resources, spvc_set active);
		private static readonly PFN_spvc_compiler_create_shader_resources_for_active_variables spvc_compiler_create_shader_resources_for_active_variables_ = LoadFunction<PFN_spvc_compiler_create_shader_resources_for_active_variables>(nameof(spvc_compiler_create_shader_resources_for_active_variables));
		public static spvc_result spvc_compiler_create_shader_resources_for_active_variables(spvc_compiler compiler, spvc_resources* resources, spvc_set active)
		{
			return spvc_compiler_create_shader_resources_for_active_variables_(compiler, resources, active);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_resources_get_resource_list_for_type(spvc_resources resources, spvc_resource_type type, spvc_reflected_resource* resource_list, nuint* resource_size);
		private static readonly PFN_spvc_resources_get_resource_list_for_type spvc_resources_get_resource_list_for_type_ = LoadFunction<PFN_spvc_resources_get_resource_list_for_type>(nameof(spvc_resources_get_resource_list_for_type));
		public static spvc_result spvc_resources_get_resource_list_for_type(spvc_resources resources, spvc_resource_type type, spvc_reflected_resource* resource_list, nuint* resource_size)
		{
			return spvc_resources_get_resource_list_for_type_(resources, type, resource_list, resource_size);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration, uint argument);
		private static readonly PFN_spvc_compiler_set_decoration spvc_compiler_set_decoration_ = LoadFunction<PFN_spvc_compiler_set_decoration>(nameof(spvc_compiler_set_decoration));
		public static void spvc_compiler_set_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration, uint argument)
		{
			spvc_compiler_set_decoration_(compiler, id, decoration, argument);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_decoration_string(spvc_compiler compiler, SpvId id, SpvDecoration decoration, byte* argument);
		private static readonly PFN_spvc_compiler_set_decoration_string spvc_compiler_set_decoration_string_ = LoadFunction<PFN_spvc_compiler_set_decoration_string>(nameof(spvc_compiler_set_decoration_string));
		public static void spvc_compiler_set_decoration_string(spvc_compiler compiler, SpvId id, SpvDecoration decoration, byte* argument)
		{
			spvc_compiler_set_decoration_string_(compiler, id, decoration, argument);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_name(spvc_compiler compiler, SpvId id, byte* argument);
		private static readonly PFN_spvc_compiler_set_name spvc_compiler_set_name_ = LoadFunction<PFN_spvc_compiler_set_name>(nameof(spvc_compiler_set_name));
		public static void spvc_compiler_set_name(spvc_compiler compiler, SpvId id, byte* argument)
		{
			spvc_compiler_set_name_(compiler, id, argument);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration, uint argument);
		private static readonly PFN_spvc_compiler_set_member_decoration spvc_compiler_set_member_decoration_ = LoadFunction<PFN_spvc_compiler_set_member_decoration>(nameof(spvc_compiler_set_member_decoration));
		public static void spvc_compiler_set_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration, uint argument)
		{
			spvc_compiler_set_member_decoration_(compiler, id, member_index, decoration, argument);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_member_decoration_string(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration, byte* argument);
		private static readonly PFN_spvc_compiler_set_member_decoration_string spvc_compiler_set_member_decoration_string_ = LoadFunction<PFN_spvc_compiler_set_member_decoration_string>(nameof(spvc_compiler_set_member_decoration_string));
		public static void spvc_compiler_set_member_decoration_string(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration, byte* argument)
		{
			spvc_compiler_set_member_decoration_string_(compiler, id, member_index, decoration, argument);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_member_name(spvc_compiler compiler, uint id, uint member_index, byte* argument);
		private static readonly PFN_spvc_compiler_set_member_name spvc_compiler_set_member_name_ = LoadFunction<PFN_spvc_compiler_set_member_name>(nameof(spvc_compiler_set_member_name));
		public static void spvc_compiler_set_member_name(spvc_compiler compiler, uint id, uint member_index, byte* argument)
		{
			spvc_compiler_set_member_name_(compiler, id, member_index, argument);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_unset_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_unset_decoration spvc_compiler_unset_decoration_ = LoadFunction<PFN_spvc_compiler_unset_decoration>(nameof(spvc_compiler_unset_decoration));
		public static void spvc_compiler_unset_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration)
		{
			spvc_compiler_unset_decoration_(compiler, id, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_unset_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_unset_member_decoration spvc_compiler_unset_member_decoration_ = LoadFunction<PFN_spvc_compiler_unset_member_decoration>(nameof(spvc_compiler_unset_member_decoration));
		public static void spvc_compiler_unset_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration)
		{
			spvc_compiler_unset_member_decoration_(compiler, id, member_index, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_has_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_has_decoration spvc_compiler_has_decoration_ = LoadFunction<PFN_spvc_compiler_has_decoration>(nameof(spvc_compiler_has_decoration));
		public static bool spvc_compiler_has_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration)
		{
			return spvc_compiler_has_decoration_(compiler, id, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_has_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_has_member_decoration spvc_compiler_has_member_decoration_ = LoadFunction<PFN_spvc_compiler_has_member_decoration>(nameof(spvc_compiler_has_member_decoration));
		public static bool spvc_compiler_has_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration)
		{
			return spvc_compiler_has_member_decoration_(compiler, id, member_index, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_get_name(spvc_compiler compiler, SpvId id);
		private static readonly PFN_spvc_compiler_get_name spvc_compiler_get_name_ = LoadFunction<PFN_spvc_compiler_get_name>(nameof(spvc_compiler_get_name));
		public static byte* spvc_compiler_get_name(spvc_compiler compiler, SpvId id)
		{
			return spvc_compiler_get_name_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_get_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_get_decoration spvc_compiler_get_decoration_ = LoadFunction<PFN_spvc_compiler_get_decoration>(nameof(spvc_compiler_get_decoration));
		public static uint spvc_compiler_get_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration)
		{
			return spvc_compiler_get_decoration_(compiler, id, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_get_decoration_string(spvc_compiler compiler, SpvId id, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_get_decoration_string spvc_compiler_get_decoration_string_ = LoadFunction<PFN_spvc_compiler_get_decoration_string>(nameof(spvc_compiler_get_decoration_string));
		public static byte* spvc_compiler_get_decoration_string(spvc_compiler compiler, SpvId id, SpvDecoration decoration)
		{
			return spvc_compiler_get_decoration_string_(compiler, id, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_get_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_get_member_decoration spvc_compiler_get_member_decoration_ = LoadFunction<PFN_spvc_compiler_get_member_decoration>(nameof(spvc_compiler_get_member_decoration));
		public static uint spvc_compiler_get_member_decoration(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration)
		{
			return spvc_compiler_get_member_decoration_(compiler, id, member_index, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_get_member_decoration_string(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration);
		private static readonly PFN_spvc_compiler_get_member_decoration_string spvc_compiler_get_member_decoration_string_ = LoadFunction<PFN_spvc_compiler_get_member_decoration_string>(nameof(spvc_compiler_get_member_decoration_string));
		public static byte* spvc_compiler_get_member_decoration_string(spvc_compiler compiler, uint id, uint member_index, SpvDecoration decoration)
		{
			return spvc_compiler_get_member_decoration_string_(compiler, id, member_index, decoration);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_get_member_name(spvc_compiler compiler, uint id, uint member_index);
		private static readonly PFN_spvc_compiler_get_member_name spvc_compiler_get_member_name_ = LoadFunction<PFN_spvc_compiler_get_member_name>(nameof(spvc_compiler_get_member_name));
		public static byte* spvc_compiler_get_member_name(spvc_compiler compiler, uint id, uint member_index)
		{
			return spvc_compiler_get_member_name_(compiler, id, member_index);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_entry_points(spvc_compiler compiler, spvc_entry_point* entry_points, nuint* num_entry_points);
		private static readonly PFN_spvc_compiler_get_entry_points spvc_compiler_get_entry_points_ = LoadFunction<PFN_spvc_compiler_get_entry_points>(nameof(spvc_compiler_get_entry_points));
		public static spvc_result spvc_compiler_get_entry_points(spvc_compiler compiler, spvc_entry_point* entry_points, nuint* num_entry_points)
		{
			return spvc_compiler_get_entry_points_(compiler, entry_points, num_entry_points);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_set_entry_point(spvc_compiler compiler, byte* name, SpvExecutionModel model);
		private static readonly PFN_spvc_compiler_set_entry_point spvc_compiler_set_entry_point_ = LoadFunction<PFN_spvc_compiler_set_entry_point>(nameof(spvc_compiler_set_entry_point));
		public static spvc_result spvc_compiler_set_entry_point(spvc_compiler compiler, byte* name, SpvExecutionModel model)
		{
			return spvc_compiler_set_entry_point_(compiler, name, model);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_rename_entry_point(spvc_compiler compiler, byte* old_name, byte* new_name, SpvExecutionModel model);
		private static readonly PFN_spvc_compiler_rename_entry_point spvc_compiler_rename_entry_point_ = LoadFunction<PFN_spvc_compiler_rename_entry_point>(nameof(spvc_compiler_rename_entry_point));
		public static spvc_result spvc_compiler_rename_entry_point(spvc_compiler compiler, byte* old_name, byte* new_name, SpvExecutionModel model)
		{
			return spvc_compiler_rename_entry_point_(compiler, old_name, new_name, model);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_get_cleansed_entry_point_name(spvc_compiler compiler, byte* name, SpvExecutionModel model);
		private static readonly PFN_spvc_compiler_get_cleansed_entry_point_name spvc_compiler_get_cleansed_entry_point_name_ = LoadFunction<PFN_spvc_compiler_get_cleansed_entry_point_name>(nameof(spvc_compiler_get_cleansed_entry_point_name));
		public static byte* spvc_compiler_get_cleansed_entry_point_name(spvc_compiler compiler, byte* name, SpvExecutionModel model)
		{
			return spvc_compiler_get_cleansed_entry_point_name_(compiler, name, model);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_execution_mode(spvc_compiler compiler, SpvExecutionMode mode);
		private static readonly PFN_spvc_compiler_set_execution_mode spvc_compiler_set_execution_mode_ = LoadFunction<PFN_spvc_compiler_set_execution_mode>(nameof(spvc_compiler_set_execution_mode));
		public static void spvc_compiler_set_execution_mode(spvc_compiler compiler, SpvExecutionMode mode)
		{
			spvc_compiler_set_execution_mode_(compiler, mode);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_unset_execution_mode(spvc_compiler compiler, SpvExecutionMode mode);
		private static readonly PFN_spvc_compiler_unset_execution_mode spvc_compiler_unset_execution_mode_ = LoadFunction<PFN_spvc_compiler_unset_execution_mode>(nameof(spvc_compiler_unset_execution_mode));
		public static void spvc_compiler_unset_execution_mode(spvc_compiler compiler, SpvExecutionMode mode)
		{
			spvc_compiler_unset_execution_mode_(compiler, mode);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_compiler_set_execution_mode_with_arguments(spvc_compiler compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2);
		private static readonly PFN_spvc_compiler_set_execution_mode_with_arguments spvc_compiler_set_execution_mode_with_arguments_ = LoadFunction<PFN_spvc_compiler_set_execution_mode_with_arguments>(nameof(spvc_compiler_set_execution_mode_with_arguments));
		public static void spvc_compiler_set_execution_mode_with_arguments(spvc_compiler compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2)
		{
			spvc_compiler_set_execution_mode_with_arguments_(compiler, mode, arg0, arg1, arg2);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_execution_modes(spvc_compiler compiler, SpvExecutionMode* modes, nuint* num_modes);
		private static readonly PFN_spvc_compiler_get_execution_modes spvc_compiler_get_execution_modes_ = LoadFunction<PFN_spvc_compiler_get_execution_modes>(nameof(spvc_compiler_get_execution_modes));
		public static spvc_result spvc_compiler_get_execution_modes(spvc_compiler compiler, SpvExecutionMode* modes, nuint* num_modes)
		{
			return spvc_compiler_get_execution_modes_(compiler, modes, num_modes);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_get_execution_mode_argument(spvc_compiler compiler, SpvExecutionMode mode);
		private static readonly PFN_spvc_compiler_get_execution_mode_argument spvc_compiler_get_execution_mode_argument_ = LoadFunction<PFN_spvc_compiler_get_execution_mode_argument>(nameof(spvc_compiler_get_execution_mode_argument));
		public static uint spvc_compiler_get_execution_mode_argument(spvc_compiler compiler, SpvExecutionMode mode)
		{
			return spvc_compiler_get_execution_mode_argument_(compiler, mode);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_get_execution_mode_argument_by_index(spvc_compiler compiler, SpvExecutionMode mode, uint index);
		private static readonly PFN_spvc_compiler_get_execution_mode_argument_by_index spvc_compiler_get_execution_mode_argument_by_index_ = LoadFunction<PFN_spvc_compiler_get_execution_mode_argument_by_index>(nameof(spvc_compiler_get_execution_mode_argument_by_index));
		public static uint spvc_compiler_get_execution_mode_argument_by_index(spvc_compiler compiler, SpvExecutionMode mode, uint index)
		{
			return spvc_compiler_get_execution_mode_argument_by_index_(compiler, mode, index);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate SpvExecutionModel  PFN_spvc_compiler_get_execution_model(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_get_execution_model spvc_compiler_get_execution_model_ = LoadFunction<PFN_spvc_compiler_get_execution_model>(nameof(spvc_compiler_get_execution_model));
		public static SpvExecutionModel spvc_compiler_get_execution_model(spvc_compiler compiler)
		{
			return spvc_compiler_get_execution_model_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_type  PFN_spvc_compiler_get_type_handle(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_get_type_handle spvc_compiler_get_type_handle_ = LoadFunction<PFN_spvc_compiler_get_type_handle>(nameof(spvc_compiler_get_type_handle));
		public static spvc_type spvc_compiler_get_type_handle(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_get_type_handle_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_base_type_id(spvc_type type);
		private static readonly PFN_spvc_type_get_base_type_id spvc_type_get_base_type_id_ = LoadFunction<PFN_spvc_type_get_base_type_id>(nameof(spvc_type_get_base_type_id));
		public static uint spvc_type_get_base_type_id(spvc_type type)
		{
			return spvc_type_get_base_type_id_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_basetype  PFN_spvc_type_get_basetype(spvc_type type);
		private static readonly PFN_spvc_type_get_basetype spvc_type_get_basetype_ = LoadFunction<PFN_spvc_type_get_basetype>(nameof(spvc_type_get_basetype));
		public static spvc_basetype spvc_type_get_basetype(spvc_type type)
		{
			return spvc_type_get_basetype_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_bit_width(spvc_type type);
		private static readonly PFN_spvc_type_get_bit_width spvc_type_get_bit_width_ = LoadFunction<PFN_spvc_type_get_bit_width>(nameof(spvc_type_get_bit_width));
		public static uint spvc_type_get_bit_width(spvc_type type)
		{
			return spvc_type_get_bit_width_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_vector_size(spvc_type type);
		private static readonly PFN_spvc_type_get_vector_size spvc_type_get_vector_size_ = LoadFunction<PFN_spvc_type_get_vector_size>(nameof(spvc_type_get_vector_size));
		public static uint spvc_type_get_vector_size(spvc_type type)
		{
			return spvc_type_get_vector_size_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_columns(spvc_type type);
		private static readonly PFN_spvc_type_get_columns spvc_type_get_columns_ = LoadFunction<PFN_spvc_type_get_columns>(nameof(spvc_type_get_columns));
		public static uint spvc_type_get_columns(spvc_type type)
		{
			return spvc_type_get_columns_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_num_array_dimensions(spvc_type type);
		private static readonly PFN_spvc_type_get_num_array_dimensions spvc_type_get_num_array_dimensions_ = LoadFunction<PFN_spvc_type_get_num_array_dimensions>(nameof(spvc_type_get_num_array_dimensions));
		public static uint spvc_type_get_num_array_dimensions(spvc_type type)
		{
			return spvc_type_get_num_array_dimensions_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_type_array_dimension_is_literal(spvc_type type, uint dimension);
		private static readonly PFN_spvc_type_array_dimension_is_literal spvc_type_array_dimension_is_literal_ = LoadFunction<PFN_spvc_type_array_dimension_is_literal>(nameof(spvc_type_array_dimension_is_literal));
		public static bool spvc_type_array_dimension_is_literal(spvc_type type, uint dimension)
		{
			return spvc_type_array_dimension_is_literal_(type, dimension);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate SpvId  PFN_spvc_type_get_array_dimension(spvc_type type, uint dimension);
		private static readonly PFN_spvc_type_get_array_dimension spvc_type_get_array_dimension_ = LoadFunction<PFN_spvc_type_get_array_dimension>(nameof(spvc_type_get_array_dimension));
		public static SpvId spvc_type_get_array_dimension(spvc_type type, uint dimension)
		{
			return spvc_type_get_array_dimension_(type, dimension);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_num_member_types(spvc_type type);
		private static readonly PFN_spvc_type_get_num_member_types spvc_type_get_num_member_types_ = LoadFunction<PFN_spvc_type_get_num_member_types>(nameof(spvc_type_get_num_member_types));
		public static uint spvc_type_get_num_member_types(spvc_type type)
		{
			return spvc_type_get_num_member_types_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_member_type(spvc_type type, uint index);
		private static readonly PFN_spvc_type_get_member_type spvc_type_get_member_type_ = LoadFunction<PFN_spvc_type_get_member_type>(nameof(spvc_type_get_member_type));
		public static uint spvc_type_get_member_type(spvc_type type, uint index)
		{
			return spvc_type_get_member_type_(type, index);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate SpvStorageClass  PFN_spvc_type_get_storage_class(spvc_type type);
		private static readonly PFN_spvc_type_get_storage_class spvc_type_get_storage_class_ = LoadFunction<PFN_spvc_type_get_storage_class>(nameof(spvc_type_get_storage_class));
		public static SpvStorageClass spvc_type_get_storage_class(spvc_type type)
		{
			return spvc_type_get_storage_class_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_type_get_image_sampled_type(spvc_type type);
		private static readonly PFN_spvc_type_get_image_sampled_type spvc_type_get_image_sampled_type_ = LoadFunction<PFN_spvc_type_get_image_sampled_type>(nameof(spvc_type_get_image_sampled_type));
		public static uint spvc_type_get_image_sampled_type(spvc_type type)
		{
			return spvc_type_get_image_sampled_type_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate SpvDim  PFN_spvc_type_get_image_dimension(spvc_type type);
		private static readonly PFN_spvc_type_get_image_dimension spvc_type_get_image_dimension_ = LoadFunction<PFN_spvc_type_get_image_dimension>(nameof(spvc_type_get_image_dimension));
		public static SpvDim spvc_type_get_image_dimension(spvc_type type)
		{
			return spvc_type_get_image_dimension_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_type_get_image_is_depth(spvc_type type);
		private static readonly PFN_spvc_type_get_image_is_depth spvc_type_get_image_is_depth_ = LoadFunction<PFN_spvc_type_get_image_is_depth>(nameof(spvc_type_get_image_is_depth));
		public static bool spvc_type_get_image_is_depth(spvc_type type)
		{
			return spvc_type_get_image_is_depth_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_type_get_image_arrayed(spvc_type type);
		private static readonly PFN_spvc_type_get_image_arrayed spvc_type_get_image_arrayed_ = LoadFunction<PFN_spvc_type_get_image_arrayed>(nameof(spvc_type_get_image_arrayed));
		public static bool spvc_type_get_image_arrayed(spvc_type type)
		{
			return spvc_type_get_image_arrayed_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_type_get_image_multisampled(spvc_type type);
		private static readonly PFN_spvc_type_get_image_multisampled spvc_type_get_image_multisampled_ = LoadFunction<PFN_spvc_type_get_image_multisampled>(nameof(spvc_type_get_image_multisampled));
		public static bool spvc_type_get_image_multisampled(spvc_type type)
		{
			return spvc_type_get_image_multisampled_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_type_get_image_is_storage(spvc_type type);
		private static readonly PFN_spvc_type_get_image_is_storage spvc_type_get_image_is_storage_ = LoadFunction<PFN_spvc_type_get_image_is_storage>(nameof(spvc_type_get_image_is_storage));
		public static bool spvc_type_get_image_is_storage(spvc_type type)
		{
			return spvc_type_get_image_is_storage_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate SpvImageFormat  PFN_spvc_type_get_image_storage_format(spvc_type type);
		private static readonly PFN_spvc_type_get_image_storage_format spvc_type_get_image_storage_format_ = LoadFunction<PFN_spvc_type_get_image_storage_format>(nameof(spvc_type_get_image_storage_format));
		public static SpvImageFormat spvc_type_get_image_storage_format(spvc_type type)
		{
			return spvc_type_get_image_storage_format_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate SpvAccessQualifier  PFN_spvc_type_get_image_access_qualifier(spvc_type type);
		private static readonly PFN_spvc_type_get_image_access_qualifier spvc_type_get_image_access_qualifier_ = LoadFunction<PFN_spvc_type_get_image_access_qualifier>(nameof(spvc_type_get_image_access_qualifier));
		public static SpvAccessQualifier spvc_type_get_image_access_qualifier(spvc_type type)
		{
			return spvc_type_get_image_access_qualifier_(type);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_declared_struct_size(spvc_compiler compiler, spvc_type struct_type, nuint* size);
		private static readonly PFN_spvc_compiler_get_declared_struct_size spvc_compiler_get_declared_struct_size_ = LoadFunction<PFN_spvc_compiler_get_declared_struct_size>(nameof(spvc_compiler_get_declared_struct_size));
		public static spvc_result spvc_compiler_get_declared_struct_size(spvc_compiler compiler, spvc_type struct_type, nuint* size)
		{
			return spvc_compiler_get_declared_struct_size_(compiler, struct_type, size);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_declared_struct_size_runtime_array(spvc_compiler compiler, spvc_type struct_type, nuint array_size, nuint* size);
		private static readonly PFN_spvc_compiler_get_declared_struct_size_runtime_array spvc_compiler_get_declared_struct_size_runtime_array_ = LoadFunction<PFN_spvc_compiler_get_declared_struct_size_runtime_array>(nameof(spvc_compiler_get_declared_struct_size_runtime_array));
		public static spvc_result spvc_compiler_get_declared_struct_size_runtime_array(spvc_compiler compiler, spvc_type struct_type, nuint array_size, nuint* size)
		{
			return spvc_compiler_get_declared_struct_size_runtime_array_(compiler, struct_type, array_size, size);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_declared_struct_member_size(spvc_compiler compiler, spvc_type type, uint index, nuint* size);
		private static readonly PFN_spvc_compiler_get_declared_struct_member_size spvc_compiler_get_declared_struct_member_size_ = LoadFunction<PFN_spvc_compiler_get_declared_struct_member_size>(nameof(spvc_compiler_get_declared_struct_member_size));
		public static spvc_result spvc_compiler_get_declared_struct_member_size(spvc_compiler compiler, spvc_type type, uint index, nuint* size)
		{
			return spvc_compiler_get_declared_struct_member_size_(compiler, type, index, size);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_type_struct_member_offset(spvc_compiler compiler, spvc_type type, uint index, uint* offset);
		private static readonly PFN_spvc_compiler_type_struct_member_offset spvc_compiler_type_struct_member_offset_ = LoadFunction<PFN_spvc_compiler_type_struct_member_offset>(nameof(spvc_compiler_type_struct_member_offset));
		public static spvc_result spvc_compiler_type_struct_member_offset(spvc_compiler compiler, spvc_type type, uint index, uint* offset)
		{
			return spvc_compiler_type_struct_member_offset_(compiler, type, index, offset);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_type_struct_member_array_stride(spvc_compiler compiler, spvc_type type, uint index, uint* stride);
		private static readonly PFN_spvc_compiler_type_struct_member_array_stride spvc_compiler_type_struct_member_array_stride_ = LoadFunction<PFN_spvc_compiler_type_struct_member_array_stride>(nameof(spvc_compiler_type_struct_member_array_stride));
		public static spvc_result spvc_compiler_type_struct_member_array_stride(spvc_compiler compiler, spvc_type type, uint index, uint* stride)
		{
			return spvc_compiler_type_struct_member_array_stride_(compiler, type, index, stride);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_type_struct_member_matrix_stride(spvc_compiler compiler, spvc_type type, uint index, uint* stride);
		private static readonly PFN_spvc_compiler_type_struct_member_matrix_stride spvc_compiler_type_struct_member_matrix_stride_ = LoadFunction<PFN_spvc_compiler_type_struct_member_matrix_stride>(nameof(spvc_compiler_type_struct_member_matrix_stride));
		public static spvc_result spvc_compiler_type_struct_member_matrix_stride(spvc_compiler compiler, spvc_type type, uint index, uint* stride)
		{
			return spvc_compiler_type_struct_member_matrix_stride_(compiler, type, index, stride);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_build_dummy_sampler_for_combined_images(spvc_compiler compiler, uint* id);
		private static readonly PFN_spvc_compiler_build_dummy_sampler_for_combined_images spvc_compiler_build_dummy_sampler_for_combined_images_ = LoadFunction<PFN_spvc_compiler_build_dummy_sampler_for_combined_images>(nameof(spvc_compiler_build_dummy_sampler_for_combined_images));
		public static spvc_result spvc_compiler_build_dummy_sampler_for_combined_images(spvc_compiler compiler, uint* id)
		{
			return spvc_compiler_build_dummy_sampler_for_combined_images_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_build_combined_image_samplers(spvc_compiler compiler);
		private static readonly PFN_spvc_compiler_build_combined_image_samplers spvc_compiler_build_combined_image_samplers_ = LoadFunction<PFN_spvc_compiler_build_combined_image_samplers>(nameof(spvc_compiler_build_combined_image_samplers));
		public static spvc_result spvc_compiler_build_combined_image_samplers(spvc_compiler compiler)
		{
			return spvc_compiler_build_combined_image_samplers_(compiler);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_combined_image_samplers(spvc_compiler compiler, spvc_combined_image_sampler* samplers, nuint* num_samplers);
		private static readonly PFN_spvc_compiler_get_combined_image_samplers spvc_compiler_get_combined_image_samplers_ = LoadFunction<PFN_spvc_compiler_get_combined_image_samplers>(nameof(spvc_compiler_get_combined_image_samplers));
		public static spvc_result spvc_compiler_get_combined_image_samplers(spvc_compiler compiler, spvc_combined_image_sampler* samplers, nuint* num_samplers)
		{
			return spvc_compiler_get_combined_image_samplers_(compiler, samplers, num_samplers);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_specialization_constants(spvc_compiler compiler, spvc_specialization_constant* constants, nuint* num_constants);
		private static readonly PFN_spvc_compiler_get_specialization_constants spvc_compiler_get_specialization_constants_ = LoadFunction<PFN_spvc_compiler_get_specialization_constants>(nameof(spvc_compiler_get_specialization_constants));
		public static spvc_result spvc_compiler_get_specialization_constants(spvc_compiler compiler, spvc_specialization_constant* constants, nuint* num_constants)
		{
			return spvc_compiler_get_specialization_constants_(compiler, constants, num_constants);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_constant  PFN_spvc_compiler_get_constant_handle(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_get_constant_handle spvc_compiler_get_constant_handle_ = LoadFunction<PFN_spvc_compiler_get_constant_handle>(nameof(spvc_compiler_get_constant_handle));
		public static spvc_constant spvc_compiler_get_constant_handle(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_get_constant_handle_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_compiler_get_work_group_size_specialization_constants(spvc_compiler compiler, spvc_specialization_constant* x, spvc_specialization_constant* y, spvc_specialization_constant* z);
		private static readonly PFN_spvc_compiler_get_work_group_size_specialization_constants spvc_compiler_get_work_group_size_specialization_constants_ = LoadFunction<PFN_spvc_compiler_get_work_group_size_specialization_constants>(nameof(spvc_compiler_get_work_group_size_specialization_constants));
		public static uint spvc_compiler_get_work_group_size_specialization_constants(spvc_compiler compiler, spvc_specialization_constant* x, spvc_specialization_constant* y, spvc_specialization_constant* z)
		{
			return spvc_compiler_get_work_group_size_specialization_constants_(compiler, x, y, z);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_active_buffer_ranges(spvc_compiler compiler, uint id, spvc_buffer_range* ranges, nuint* num_ranges);
		private static readonly PFN_spvc_compiler_get_active_buffer_ranges spvc_compiler_get_active_buffer_ranges_ = LoadFunction<PFN_spvc_compiler_get_active_buffer_ranges>(nameof(spvc_compiler_get_active_buffer_ranges));
		public static spvc_result spvc_compiler_get_active_buffer_ranges(spvc_compiler compiler, uint id, spvc_buffer_range* ranges, nuint* num_ranges)
		{
			return spvc_compiler_get_active_buffer_ranges_(compiler, id, ranges, num_ranges);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate float  PFN_spvc_constant_get_scalar_fp16(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_fp16 spvc_constant_get_scalar_fp16_ = LoadFunction<PFN_spvc_constant_get_scalar_fp16>(nameof(spvc_constant_get_scalar_fp16));
		public static float spvc_constant_get_scalar_fp16(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_fp16_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate float  PFN_spvc_constant_get_scalar_fp32(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_fp32 spvc_constant_get_scalar_fp32_ = LoadFunction<PFN_spvc_constant_get_scalar_fp32>(nameof(spvc_constant_get_scalar_fp32));
		public static float spvc_constant_get_scalar_fp32(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_fp32_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate double  PFN_spvc_constant_get_scalar_fp64(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_fp64 spvc_constant_get_scalar_fp64_ = LoadFunction<PFN_spvc_constant_get_scalar_fp64>(nameof(spvc_constant_get_scalar_fp64));
		public static double spvc_constant_get_scalar_fp64(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_fp64_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_constant_get_scalar_u32(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_u32 spvc_constant_get_scalar_u32_ = LoadFunction<PFN_spvc_constant_get_scalar_u32>(nameof(spvc_constant_get_scalar_u32));
		public static uint spvc_constant_get_scalar_u32(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_u32_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate int  PFN_spvc_constant_get_scalar_i32(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_i32 spvc_constant_get_scalar_i32_ = LoadFunction<PFN_spvc_constant_get_scalar_i32>(nameof(spvc_constant_get_scalar_i32));
		public static int spvc_constant_get_scalar_i32(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_i32_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_constant_get_scalar_u16(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_u16 spvc_constant_get_scalar_u16_ = LoadFunction<PFN_spvc_constant_get_scalar_u16>(nameof(spvc_constant_get_scalar_u16));
		public static uint spvc_constant_get_scalar_u16(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_u16_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate int  PFN_spvc_constant_get_scalar_i16(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_i16 spvc_constant_get_scalar_i16_ = LoadFunction<PFN_spvc_constant_get_scalar_i16>(nameof(spvc_constant_get_scalar_i16));
		public static int spvc_constant_get_scalar_i16(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_i16_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_constant_get_scalar_u8(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_u8 spvc_constant_get_scalar_u8_ = LoadFunction<PFN_spvc_constant_get_scalar_u8>(nameof(spvc_constant_get_scalar_u8));
		public static uint spvc_constant_get_scalar_u8(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_u8_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate int  PFN_spvc_constant_get_scalar_i8(spvc_constant constant, uint column, uint row);
		private static readonly PFN_spvc_constant_get_scalar_i8 spvc_constant_get_scalar_i8_ = LoadFunction<PFN_spvc_constant_get_scalar_i8>(nameof(spvc_constant_get_scalar_i8));
		public static int spvc_constant_get_scalar_i8(spvc_constant constant, uint column, uint row)
		{
			return spvc_constant_get_scalar_i8_(constant, column, row);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void  PFN_spvc_constant_get_subconstants(spvc_constant constant, uint* constituents, nuint* count);
		private static readonly PFN_spvc_constant_get_subconstants spvc_constant_get_subconstants_ = LoadFunction<PFN_spvc_constant_get_subconstants>(nameof(spvc_constant_get_subconstants));
		public static void spvc_constant_get_subconstants(spvc_constant constant, uint* constituents, nuint* count)
		{
			spvc_constant_get_subconstants_(constant, constituents, count);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate uint  PFN_spvc_constant_get_type(spvc_constant constant);
		private static readonly PFN_spvc_constant_get_type spvc_constant_get_type_ = LoadFunction<PFN_spvc_constant_get_type>(nameof(spvc_constant_get_type));
		public static uint spvc_constant_get_type(spvc_constant constant)
		{
			return spvc_constant_get_type_(constant);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_get_binary_offset_for_decoration(spvc_compiler compiler, uint id, SpvDecoration decoration, uint* word_offset);
		private static readonly PFN_spvc_compiler_get_binary_offset_for_decoration spvc_compiler_get_binary_offset_for_decoration_ = LoadFunction<PFN_spvc_compiler_get_binary_offset_for_decoration>(nameof(spvc_compiler_get_binary_offset_for_decoration));
		public static bool spvc_compiler_get_binary_offset_for_decoration(spvc_compiler compiler, uint id, SpvDecoration decoration, uint* word_offset)
		{
			return spvc_compiler_get_binary_offset_for_decoration_(compiler, id, decoration, word_offset);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_buffer_is_hlsl_counter_buffer(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_buffer_is_hlsl_counter_buffer spvc_compiler_buffer_is_hlsl_counter_buffer_ = LoadFunction<PFN_spvc_compiler_buffer_is_hlsl_counter_buffer>(nameof(spvc_compiler_buffer_is_hlsl_counter_buffer));
		public static bool spvc_compiler_buffer_is_hlsl_counter_buffer(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_buffer_is_hlsl_counter_buffer_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate bool  PFN_spvc_compiler_buffer_get_hlsl_counter_buffer(spvc_compiler compiler, uint id, uint* counter_id);
		private static readonly PFN_spvc_compiler_buffer_get_hlsl_counter_buffer spvc_compiler_buffer_get_hlsl_counter_buffer_ = LoadFunction<PFN_spvc_compiler_buffer_get_hlsl_counter_buffer>(nameof(spvc_compiler_buffer_get_hlsl_counter_buffer));
		public static bool spvc_compiler_buffer_get_hlsl_counter_buffer(spvc_compiler compiler, uint id, uint* counter_id)
		{
			return spvc_compiler_buffer_get_hlsl_counter_buffer_(compiler, id, counter_id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_declared_capabilities(spvc_compiler compiler, SpvCapability* capabilities, nuint* num_capabilities);
		private static readonly PFN_spvc_compiler_get_declared_capabilities spvc_compiler_get_declared_capabilities_ = LoadFunction<PFN_spvc_compiler_get_declared_capabilities>(nameof(spvc_compiler_get_declared_capabilities));
		public static spvc_result spvc_compiler_get_declared_capabilities(spvc_compiler compiler, SpvCapability* capabilities, nuint* num_capabilities)
		{
			return spvc_compiler_get_declared_capabilities_(compiler, capabilities, num_capabilities);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_declared_extensions(spvc_compiler compiler, byte* extensions, nuint* num_extensions);
		private static readonly PFN_spvc_compiler_get_declared_extensions spvc_compiler_get_declared_extensions_ = LoadFunction<PFN_spvc_compiler_get_declared_extensions>(nameof(spvc_compiler_get_declared_extensions));
		public static spvc_result spvc_compiler_get_declared_extensions(spvc_compiler compiler, byte* extensions, nuint* num_extensions)
		{
			return spvc_compiler_get_declared_extensions_(compiler, extensions, num_extensions);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate byte*  PFN_spvc_compiler_get_remapped_declared_block_name(spvc_compiler compiler, uint id);
		private static readonly PFN_spvc_compiler_get_remapped_declared_block_name spvc_compiler_get_remapped_declared_block_name_ = LoadFunction<PFN_spvc_compiler_get_remapped_declared_block_name>(nameof(spvc_compiler_get_remapped_declared_block_name));
		public static byte* spvc_compiler_get_remapped_declared_block_name(spvc_compiler compiler, uint id)
		{
			return spvc_compiler_get_remapped_declared_block_name_(compiler, id);
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate spvc_result  PFN_spvc_compiler_get_buffer_block_decorations(spvc_compiler compiler, uint id, SpvDecoration* decorations, nuint* num_decorations);
		private static readonly PFN_spvc_compiler_get_buffer_block_decorations spvc_compiler_get_buffer_block_decorations_ = LoadFunction<PFN_spvc_compiler_get_buffer_block_decorations>(nameof(spvc_compiler_get_buffer_block_decorations));
		public static spvc_result spvc_compiler_get_buffer_block_decorations(spvc_compiler compiler, uint id, SpvDecoration* decorations, nuint* num_decorations)
		{
			return spvc_compiler_get_buffer_block_decorations_(compiler, id, decorations, num_decorations);
		}

	}
}
